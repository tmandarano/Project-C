<?php
require_once('src/models/user.php');
require_once('src/dao/user_dao.php');
require_once('src/utils/config.php');
require_once('src/utils/helpers.php');

Config::configure();

$rpxApiKey = '6af1713bce4897a0067343c5da898e1dccb6862d';  

authenticate($rpxApiKey);

redirect_to('/');

function authenticate($rpxApiKey) {
    if(isset($_POST['token'])) { 
        /* STEP 1: Extract token POST parameter */
        $token = $_POST['token'];
  
        /* STEP 2: Use the token to make the auth_info API call */
        $post_data = array('token' => $_POST['token'], 'apiKey' => $rpxApiKey,
                           'format' => 'json'); 
  
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_URL, 'https://rpxnow.com/api/v2/auth_info');
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);
        curl_setopt($curl, CURLOPT_HEADER, false);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
        $raw_json = curl_exec($curl);
        curl_close($curl);
  
  
        /* STEP 3: Parse the JSON auth_info response */
        $auth_info = json_decode($raw_json, true);

        if ($auth_info['stat'] == 'ok') {
            /* STEP 3 Continued: Extract the 'identifier' from the response */
            $profile = $auth_info['profile'];
            
            $primaryKey = null;
            $user = null;

            if(isset($profile['primaryKey'])) {
                $primaryKey = $profile['primaryKey'];
                $user = UserDAO::get_user_by_id($primaryKey);
            }

            if(is_null($user)) {
                $user = create_local_user($profile);
            }
            map_user_to_janrain($profile, $user->get_id(), $rpxApiKey);
    
            session_name(option('session'));
            if (session_start()) {
                $_SESSION['user'] = serialize($user);
            } else {
                debug('Session could not be started');
            }
        } else {
            /* an error occurred */
            // gracefully handle the error.  Hook this into your native error 
            // handling system.
            debug('ERROR in RPX', $auth_info['err']['msg']);
            halt(500);
        }
    }
}


function create_local_user($profile) {
    $user = new User();
    if (isset($profile['displayName'])) { 
        $user->set_username($profile['displayName']);
    }
    if (isset($profile['email'])) { 
        $user->set_email($profile['email']);
    }
    if (isset($profile['photo'])) {     
        $user->set_photo_url($profile['photo']);
    }

    $user_id = UserDao::save($user);
    $user->set_id($user_id);

    return $user;
}


function map_user_to_janrain($profile, $primaryKey, $rpxApiKey) {
    $post_data = array('apiKey' => $rpxApiKey, 
                       'identifier' => $profile['identifier'],
                       'primaryKey' => $primaryKey,
                       'overwrite'  => true,
                       'format' => 'json'); 
  
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_URL, 'https://rpxnow.com/api/v2/map');
    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);
    curl_setopt($curl, CURLOPT_HEADER, false);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
    $raw_json = curl_exec($curl);
    curl_close($curl);
  
    $auth_info = json_decode($raw_json, true);
    
    if ($auth_info['stat'] == 'ok') {
        return true;
    } else {
        /* an error occurred */
        // gracefully handle the error.  Hook this into your native error 
        // handling system.
        debug('ERROR in RPX', $auth_info['err']['msg']);
        halt(500);
    }
}


function unmap_user_from_janrain($profile, $primaryKey, $rpxApiKey) {
    $post_data = array('apiKey' => $rpxApiKey, 
                       'identifier' => $profile['identifier'],
                       'primaryKey' => $primaryKey,
                       'format' => 'json'); 
  
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_URL, 'https://rpxnow.com/api/v2/unmap');
    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $post_data);
    curl_setopt($curl, CURLOPT_HEADER, false);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
    $raw_json = curl_exec($curl);
    curl_close($curl);
  
    $auth_info = json_decode($raw_json, true);
    
    if ($auth_info['stat'] == 'ok') {
        return true;
    } else {
        /* an error occurred */
        // gracefully handle the error.  Hook this into your native error 
        // handling system.
        debug('ERROR in RPX', $auth_info['err']['msg']);
        halt(500);
    }
}
?>
